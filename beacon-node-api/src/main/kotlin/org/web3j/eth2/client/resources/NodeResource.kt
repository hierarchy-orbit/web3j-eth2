/**
 * Eth2 Beacon Node API
 * API specification for the beacon node, which enables users to query and participate in Ethereum 2.0 phase 0 beacon chain.
 *
 * OpenAPI spec version: v0.12.2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package org.web3j.eth2.client.resources

import org.web3j.eth2.client.infrastructure.ApiClient
import org.web3j.eth2.client.infrastructure.ClientError
import org.web3j.eth2.client.infrastructure.ClientException
import org.web3j.eth2.client.infrastructure.RequestConfig
import org.web3j.eth2.client.infrastructure.RequestMethod
import org.web3j.eth2.client.infrastructure.ResponseType
import org.web3j.eth2.client.infrastructure.ServerError
import org.web3j.eth2.client.infrastructure.ServerException
import org.web3j.eth2.client.infrastructure.Success
import org.web3j.eth2.client.models.GetNetworkIdentityResponse
import org.web3j.eth2.client.models.GetPeerResponse
import org.web3j.eth2.client.models.GetPeersResponse
import org.web3j.eth2.client.models.GetSyncingStatusResponse
import org.web3j.eth2.client.models.GetVersionResponse

class NodeResource(basePath: String = "{server_url}") : ApiClient(basePath) {

    /**
     * Get health check
     * Returns node health status in http status codes. Useful for load balancers.
     * @return void
     */
    fun getHealth(): Unit {

        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/eth/v1/node/health"
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String
                    ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message
                    ?: "Server error")
        }
    }

    /**
     * Get node network identity
     * Retrieves data about the node&#x27;s network presence
     * @return GetNetworkIdentityResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun getNetworkIdentity(): GetNetworkIdentityResponse {

        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/eth/v1/node/identity"
        )
        val response = request<GetNetworkIdentityResponse>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as GetNetworkIdentityResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String
                    ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message
                    ?: "Server error")
        }
    }

    /**
     * Get version string of the running beacon node.
     * Requests that the beacon node identify information about its implementation in a format similar to a  [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3) field.
     * @return GetVersionResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun getNodeVersion(): GetVersionResponse {

        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/eth/v1/node/version"
        )
        val response = request<GetVersionResponse>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as GetVersionResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String
                    ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message
                    ?: "Server error")
        }
    }

    /**
     * Get peer
     * Retrieves data about the given peer
     * @param peerId
     * @return GetPeerResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun getPeer(peerId: String): GetPeerResponse {

        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/eth/v1/node/peers/{peer_id}".replace("{" + "peer_id" + "}", "$peerId")
        )
        val response = request<GetPeerResponse>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as GetPeerResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String
                    ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message
                    ?: "Server error")
        }
    }

    /**
     * Get node network peers
     * Retrieves data about the node&#x27;s network peers
     * @return GetPeersResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun getPeers(): GetPeersResponse {

        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/eth/v1/node/peers"
        )
        val response = request<GetPeersResponse>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as GetPeersResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String
                    ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message
                    ?: "Server error")
        }
    }

    /**
     * Get node syncing status
     * Requests the beacon node to describe if it&#x27;s currently syncing or not, and if it is, what block it is up to.
     * @return GetSyncingStatusResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun getSyncingStatus(): GetSyncingStatusResponse {

        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/eth/v1/node/syncing"
        )
        val response = request<GetSyncingStatusResponse>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as GetSyncingStatusResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String
                    ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message
                    ?: "Server error")
        }
    }
}
